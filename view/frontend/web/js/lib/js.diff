From 8df272d9a102a877a152834da450df8da2a18ac2 Mon Sep 17 00:00:00 2001
From: random <random@x-cart.com>
Date: Thu, 13 Feb 2020 18:13:06 +0400
Subject: [PATCH] [XP-2334] Added ApplePay support to SDK. Step 1

---
 .../modules/XPay/XPaymentsCloud/checkout/widget.js | 83 +++++++++++++++++++---
 1 file changed, 73 insertions(+), 10 deletions(-)

diff --git a/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js b/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js
index ffb1d77..ff61718 100644
--- a/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js
+++ b/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js
@@ -6,8 +6,10 @@ function XPaymentsWidget()
 {
     this.serverDomain = 'xpayments.com';
     this.messageNamespace = 'xpayments.widget.';
+    this.receiverNamespace = 'xpayments.checkout.';
     this.widgetId = this.generateId();
     this.previousHeight = -1;
+    this.applePaySession = null;
 
     this.config = {
         debug: false,
@@ -18,6 +20,7 @@ function XPaymentsWidget()
         language: '',
         customerId: '',
         showSaveCard: true,
+        enableApplePay: true,
         order: {
             tokenizeCard: false,
             total: -1,
@@ -194,16 +197,58 @@ XPaymentsWidget.prototype.getServerUrl = function()
 
 XPaymentsWidget.prototype.submit = function()
 {
-    this.postMessage({ event: 'xpayments.checkout.submit' });
+    this._sendEvent('submit');
 }
 
 XPaymentsWidget.prototype._afterLoad = function(params)
 {
     this.showSaveCard();
+    if (this._isApplePayAvailable() && this.config.enableApplePay) {
+      this._sendEvent('applepay.enable');
+    }
     this.setOrder();
     this.resize(params.height);
 }
 
+XPaymentsWidget.prototype._applePayValidated = function(params)
+{
+    this.applePaySession.completeMerchantValidation(params.data);
+}
+
+XPaymentsWidget.prototype._applePayCompleted = function(params)
+{
+    this.applePaySession.completePayment({ status: ApplePaySession.STATUS_SUCCESS, errors: [] });
+}
+
+XPaymentsWidget.prototype._applePayStart = function(params)
+{
+    //TODO: get missing params from XP settings
+    var request = {
+        countryCode: 'US',
+        currencyCode: this.config.order.currency,
+        supportedNetworks: ['visa', 'masterCard', 'amex', 'discover'],
+        merchantCapabilities: ['supports3DS'],
+        total: { label: '__SHOP__', amount: this.config.order.total },
+    };
+
+    this.applePaySession = new ApplePaySession(3, request);
+
+    this.applePaySession.onvalidatemerchant = (function(event) {
+        this._sendEvent('applepay.onvalidatemerchant', { validationURL: event.validationURL });
+    }).bind(this);
+
+    this.applePaySession.onpaymentauthorized = (function(event) {
+        this._sendEvent('applepay.onpaymentauthorized', { payment: event.payment });
+    }).bind(this);
+
+    this.applePaySession.begin();
+
+}
+
+XPaymentsWidget.prototype._isApplePayAvailable = function() {
+    return (window.ApplePaySession && ApplePaySession.canMakePayments());
+}
+
 XPaymentsWidget.prototype.showSaveCard = function(value)
 {
     if ('undefined' === typeof value) {
@@ -211,13 +256,13 @@ XPaymentsWidget.prototype.showSaveCard = function(value)
     } else {
         this.config.showSaveCard = (true === value);
     }
-    this.postMessage({ event: 'xpayments.checkout.savecard', params: { show: value } });
+    this._sendEvent('savecard', { show: value });
 }
 
 
 XPaymentsWidget.prototype.refresh = function()
 {
-    this.postMessage({ event: 'xpayments.checkout.refresh' });
+    this._sendEvent('refresh');
 }
 
 XPaymentsWidget.prototype.resize = function(height)
@@ -235,11 +280,11 @@ XPaymentsWidget.prototype.setOrder = function(total, currency)
         this.config.order.total = total;
         this.config.order.currency = currency;
     }
-    this.postMessage({ event: 'xpayments.checkout.details', params: {
+    this._sendEvent('details', {
         tokenizeCard: this.config.order.tokenizeCard,
         total: this.config.order.total,
         currency: this.config.order.currency
-    }});
+    });
 }
 
 XPaymentsWidget.prototype.destroy = function()
@@ -279,12 +324,18 @@ XPaymentsWidget.prototype.messageListener = function(event)
             msg.event &&
             0 === msg.event.indexOf(this.messageNamespace)
         ) {
-            this.log('X-Payments Event: ' + msg.event + "\n" + window.JSON.stringify(msg.params));
+            this._log('X-Payments Event: ' + msg.event + "\n" + window.JSON.stringify(msg.params));
 
             var eventType = msg.event.substr(this.messageNamespace.length);
 
             if ('loaded' === eventType) {
                 this._afterLoad(msg.params);
+            } else if ('applepay.start' === eventType) {
+                this._applePayStart(msg.params);
+            } else if ('applepay.merchantvalidated' === eventType) {
+                this._applePayValidated(msg.params);
+            } else if ('applepay.completed' === eventType) {
+                this._applePayCompleted(msg.params);
             } else if ('resize' === eventType) {
                 this.resize(msg.params.height);
             } else if ('alert' === eventType) {
@@ -297,14 +348,26 @@ XPaymentsWidget.prototype.messageListener = function(event)
     }
 }
 
-XPaymentsWidget.prototype.log = function(msg)
+XPaymentsWidget.prototype._log = function(msg)
 {
     if (this.config.debug) {
         console.log(msg);
     }
 }
 
-XPaymentsWidget.prototype.postMessage = function(message)
+XPaymentsWidget.prototype._sendEvent = function(eventName, eventParams)
+{
+    if ('undefined' === typeof eventParams) {
+        eventParams = {};
+    }
+
+    this._postMessage({
+        event: this.receiverNamespace + eventName,
+        params: eventParams
+    })
+}
+
+XPaymentsWidget.prototype._postMessage = function(message)
 {
     var elm = this.getIframeElm();
     if (
@@ -313,9 +376,9 @@ XPaymentsWidget.prototype.postMessage = function(message)
         && elm
         && elm.contentWindow
     ) {
-        this.log('Sent to X-Payments: ' + message.event + "\n" + window.JSON.stringify(message.params));
+        this._log('Sent to X-Payments: ' + message.event + "\n" + window.JSON.stringify(message.params));
         elm.contentWindow.postMessage(window.JSON.stringify(message), '*');
     } else {
-        this.log('Error sending message - iframe wasn\'t initialized!');
+        this._log('Error sending message - iframe wasn\'t initialized!');
     }
 }
-- 
2.10.5

