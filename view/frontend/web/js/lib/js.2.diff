diff --git a/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js b/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js
index ff61718..30dea75 100644
--- a/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js
+++ b/src/skins/customer/modules/XPay/XPaymentsCloud/checkout/widget.js
@@ -21,6 +21,11 @@ function XPaymentsWidget()
         customerId: '',
         showSaveCard: true,
         enableApplePay: true,
+        company: {
+            name: '',
+            domain: document.location.hostname,
+            countryCode: '',
+        },
         order: {
             tokenizeCard: false,
             total: -1,
@@ -70,7 +75,15 @@ XPaymentsWidget.prototype.init = function(settings)
 {
   for (var key in settings) {
       if ('undefined' !== typeof this.config[key]) {
-          this.config[key] = settings[key];
+          if ('object' === typeof this.config[key]) {
+              for (var subkey in settings[key]) {
+                  if ('undefined' !== typeof this.config[key][subkey]) {
+                      this.config[key][subkey] = settings[key][subkey];
+                  }
+              }
+          } else {
+              this.config[key] = settings[key];
+          }
       }
   }
 
@@ -220,27 +233,45 @@ XPaymentsWidget.prototype._applePayCompleted = function(params)
     this.applePaySession.completePayment({ status: ApplePaySession.STATUS_SUCCESS, errors: [] });
 }
 
+XPaymentsWidget.prototype._applePayError = function(params)
+{
+    this.applePaySession.abort();
+}
+
+
 XPaymentsWidget.prototype._applePayStart = function(params)
 {
-    //TODO: get missing params from XP settings
+    //TODO: get supported networks from params defined by XP
+
     var request = {
-        countryCode: 'US',
+        countryCode: this.config.company.countryCode,
         currencyCode: this.config.order.currency,
         supportedNetworks: ['visa', 'masterCard', 'amex', 'discover'],
         merchantCapabilities: ['supports3DS'],
-        total: { label: '__SHOP__', amount: this.config.order.total },
+        total: {
+            label: this.config.company.name,
+            amount: this.config.order.total
+        },
     };
 
     this.applePaySession = new ApplePaySession(3, request);
 
     this.applePaySession.onvalidatemerchant = (function(event) {
-        this._sendEvent('applepay.onvalidatemerchant', { validationURL: event.validationURL });
+        this._sendEvent('applepay.onvalidatemerchant', {
+            validationURL: event.validationURL,
+            displayName: this.config.company.name,
+            context: this.config.company.domain,
+        });
     }).bind(this);
 
     this.applePaySession.onpaymentauthorized = (function(event) {
         this._sendEvent('applepay.onpaymentauthorized', { payment: event.payment });
     }).bind(this);
 
+    this.applePaySession.oncancel = (function(event) {
+        this._sendEvent('applepay.oncancel');
+    }).bind(this);
+
     this.applePaySession.begin();
 
 }
@@ -249,6 +280,16 @@ XPaymentsWidget.prototype._isApplePayAvailable = function() {
     return (window.ApplePaySession && ApplePaySession.canMakePayments());
 }
 
+XPaymentsWidget.prototype._checkApplePayActiveCard = function(params)
+{
+    var promise = ApplePaySession.canMakePaymentsWithActiveCard(params.merchantId);
+    promise.then((function (canMakePayments) {
+        if (canMakePayments) {
+            this._sendEvent('applepay.select');
+        }
+    }).bind(this));
+}
+
 XPaymentsWidget.prototype.showSaveCard = function(value)
 {
     if ('undefined' === typeof value) {
@@ -332,14 +373,21 @@ XPaymentsWidget.prototype.messageListener = function(event)
                 this._afterLoad(msg.params);
             } else if ('applepay.start' === eventType) {
                 this._applePayStart(msg.params);
+            } else if ('applepay.checkactivecard' === eventType) {
+                this._checkApplePayActiveCard(msg.params);
             } else if ('applepay.merchantvalidated' === eventType) {
                 this._applePayValidated(msg.params);
             } else if ('applepay.completed' === eventType) {
                 this._applePayCompleted(msg.params);
+            } else if ('applepay.error' === eventType) {
+                this._applePayError(msg.params);
             } else if ('resize' === eventType) {
                 this.resize(msg.params.height);
             } else if ('alert' === eventType) {
-                msg.params.message = msg.params.message.replace(/<\/?[^>]+>/gi, '');
+                msg.params.message =
+                    ('string' === typeof msg.params.message)
+                    ? msg.params.message.replace(/<\/?[^>]+>/gi, '')
+                    : '';
             }
 
             this.trigger(eventType, msg.params);
-- 
2.10.5

